"use client";

import { useState, useEffect } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import styles from "../../../styles/Campaigns/CampaignBoard.module.css";
import Image from "next/image";
import SearchBar from "../Home/SearchBar";
import { FaImage, FaRegFlag } from "react-icons/fa";
import AOS from "aos";
import "aos/dist/aos.css";
import {
  getAllFeaturedActivities,
  FeaturedActivity,
} from "@/lib/firebase/getFeaturedActivities";
import Swal from "sweetalert2";
import CampaignCardActions from "../Home/sub/CampaignCardActions"; 
import { createCampaignDynamicLink } from "../../../lib/firebase/dynamicLinks";
import useBookmarks from "../../../lib/firebase/useBookmarks";
import { getAuth } from "firebase/auth";

const filters = [
  "T·∫•t c·∫£",
  "X√≥a ƒë√≥i",
  "Tr·∫ª em",
  "Ng∆∞·ªùi cao tu·ªïi",
  "Ng∆∞·ªùi ngh√®o",
  "Ng∆∞·ªùi khuy·∫øt t·∫≠t",
  "B·ªánh hi·ªÉm ngh√®o",
  "D√¢n t·ªôc thi·ªÉu s·ªë",
  "Lao ƒë·ªông di c∆∞",
  "Ng∆∞·ªùi v√¥ gia c∆∞",
  "M√¥i tr∆∞·ªùng",
  "X√≥a ngh√®o",
  "Thi√™n tai",
  "Gi√°o d·ª•c",
];

const partners = [
  {
    name: "C√¥ng ty TNHH Thi·ªán T√¢m",
    email: "contact@thientam.vn",
    logo: "/images/partner1.jpg",
  },
  {
    name: "T·∫≠p ƒëo√†n Xanh B·ªÅn V·ªØng",
    email: "info@xanhbenvung.vn",
    logo: "/images/partner2.jpg",
  },
  {
    name: "Qu·ªπ H·ªó tr·ª£ C·ªông ƒë·ªìng",
    email: "support@quyhocongdong.org",
    logo: "/images/partner3.jpg",
  },
];

function formatDate(timestamp: { seconds: number } | null | undefined): string {
  if (!timestamp || typeof timestamp.seconds !== "number") return "N/A";
  const date = new Date(timestamp.seconds * 1000);
  return date.toLocaleString("vi-VN", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });
}

export default function CampaignBoardPage() {
  const [selectedFilter, setSelectedFilter] = useState("T·∫•t c·∫£");
  const [searchTerm, setSearchTerm] = useState("");
  const [campaigns, setCampaigns] = useState<FeaturedActivity[]>([]);
  const searchParams = useSearchParams();
  const sortFilter = searchParams?.get("sort") || "default";
  const router = useRouter();
  const [hasMounted, setHasMounted] = useState(false);
  const { bookmarkedIds, toggleBookmark } = useBookmarks();

useEffect(() => {
  if (typeof window !== "undefined") {
    AOS.init({ duration: 800, once: true });
    setHasMounted(true);

    return () => {
      const aosElements = document.querySelectorAll("[data-aos]");
      aosElements.forEach((el) => {
        el.classList.remove("aos-animate");
      });
    };
  }
}, []);

  useEffect(() => {
    const fetchCampaigns = async () => {
      const data = await getAllFeaturedActivities();
      setCampaigns(data);
    };
    fetchCampaigns();
  }, []);

  if (!hasMounted) {
    return null;
  }

  const now = new Date();

  const filteredCampaigns = campaigns.filter((c) => {
    const matchesFilter =
      selectedFilter === "T·∫•t c·∫£" || c.category === selectedFilter;
    const matchesSearch = c.title
      ?.toLowerCase()
      .includes(searchTerm.toLowerCase());

    const endDate = c.endDate?.seconds
      ? new Date(c.endDate.seconds * 1000)
      : null;

    const isInFuture = endDate && endDate > now;

    return matchesFilter && matchesSearch && isInFuture;
  });

  const sortedCampaigns = [...filteredCampaigns].sort((a, b) => {
    if (sortFilter === "title") {
      return a.title.localeCompare(b.title);
    }
    if (sortFilter === "endDate") {
      const dateA = a.endDate?.seconds || 0;
      const dateB = b.endDate?.seconds || 0;
      return dateA - dateB;
    }
    return 0;
  });

  const goToDetail = (id: string) => {
    router.push(`/campaign/${id}`);
  };
  const handleShareCampaign = async (campaignId: string) => {
  try {
    const link = await createCampaignDynamicLink(campaignId); 

    if (navigator.share) {
  
      await navigator.share({
        title: 'Chi·∫øn d·ªãch thi·ªán nguy·ªán t·ª´ HelpConnect',
        text: 'H√£y c√πng lan t·ªèa y√™u th∆∞∆°ng v√† tham gia chi·∫øn d·ªãch √Ω nghƒ©a n√†y!', 
        url: link, 
      });
    } else {
      await navigator.clipboard.writeText(link);
      Swal.fire("ƒê√£ sao ch√©p link", link, "success");
    }
  } catch (error) {
    if (error instanceof DOMException && error.name === 'AbortError') {
      console.log('Chia s·∫ª b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng.');
    } else {
      console.error("L·ªói khi chia s·∫ª ho·∫∑c t·∫°o dynamic link:", error);
      Swal.fire("L·ªói", "Kh√¥ng th·ªÉ chia s·∫ª ho·∫∑c t·∫°o link chia s·∫ª.", "error");
    }
  }
};
  const handleToggleBookmark = (campaignId: string) => {
    const auth = getAuth();
    const user = auth.currentUser;

    if (!user) {
      Swal.fire("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u chi·∫øn d·ªãch y√™u th√≠ch.", "", "info");
      return;
    }

    toggleBookmark(campaignId);
  };
  return (
    <>
      <SearchBar searchTerm={searchTerm} onSearchChange={setSearchTerm} />
      <section className={styles.boardWrapper}>
        <h1 className={styles.pageTitle} data-aos="fade-down">
          üì∞ B·∫£ng tin chi·∫øn d·ªãch
        </h1>

        <div className={styles.filterBar} data-aos="fade-up">
          {filters.map((filter) => (
            <button
              key={filter}
              className={`${styles.filterBtn} ${
                selectedFilter === filter ? styles.activeFilter : ""
              }`}
              onClick={() => setSelectedFilter(filter)}
            >
              {filter}
            </button>
          ))}
        </div>

        <div className={styles.contentLayout}>
          <div className={styles.leftColumn}>
            <div className={styles.grid}>
              {sortedCampaigns.map((campaign, index) => (
                <div
                  key={campaign.id}
                  className={styles.card}
                  data-aos="fade-up"
                  data-aos-delay={index * 100}
                >
                  <div className={styles.imageContainer}>
                    {campaign.imageUrl ? (
                      <Image
                        src={campaign.imageUrl}
                        alt={campaign.title}
                        fill
                        className={styles.imageUrl}
                        onClick={() => goToDetail(campaign.id)}
                        style={{ cursor: "pointer" }}
                      />
                    ) : (
                      <div className={styles.imagePlaceholder}>
                        <FaImage className="text-gray-400 text-5xl" />
                      </div>
                    )}
                    <div
                      className={`${styles.flagIcon} ${bookmarkedIds.includes(campaign.id) ? styles.flagIconActive : ""}`}
                      onClick={() => handleToggleBookmark(campaign.id)}
                      style={{ cursor: "pointer" }}
                    >
                    <FaRegFlag
                      className={bookmarkedIds.includes(campaign.id) ? "text-orange-400" : "text-orange-600"}
                    />
                  </div>

                  </div>

                  <h3
                    className={styles.cardTitle}
                    onClick={() => goToDetail(campaign.id)}
                    style={{ cursor: "pointer" }}
                  >
                    {campaign.title}
                  </h3>

                  <p
                    className={styles.cardDescription}
                    onClick={() => goToDetail(campaign.id)}
                    style={{ cursor: "pointer" }}
                  >
                    {campaign.description}
                  </p>

                  <div className={styles.cardMeta}>
                    <div className={styles.metaItem}>
                      üìÖ Th·ªùi gian: {formatDate(campaign.startDate)} -{" "}
                      {formatDate(campaign.endDate)}
                    </div>
                    <div className={styles.metaItem}>
                      üè∑Ô∏è Danh m·ª•c: {campaign.category}
                    </div>
                    <div className={styles.metaItem}>
                      ‚ö° M·ª©c ƒë·ªô kh·∫©n c·∫•p: {campaign.urgency}
                    </div>
                    <div className={styles.metaRow}>
                      <div className={styles.metaItemLeft}>
                        üë• {campaign.participantCount}/{campaign.maxVolunteerCount}
                      </div>
                      <div className={styles.metaItemRight}>
                        {campaign.totalDonationAmount?.toLocaleString()} ƒë
                      </div>
                    </div>
                  </div>

                  <div className={styles.cardActions}>
                    <CampaignCardActions
                      campaignId={campaign.id}
                      onJoin={() => goToDetail(campaign.id)}
                      onShare={() => handleShareCampaign(campaign.id)}
                    />
                  </div>
                </div>
              ))}
            </div>

            {filteredCampaigns.length === 0 && (
              <p className="text-center text-gray-500 mt-6" data-aos="fade-in">
                Kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ph√π h·ª£p.
              </p>
            )}
          </div>

          <div className={styles.rightColumn}>
            <h2 className={styles.partnerTitle} data-aos="fade-left">
              ü§ù ƒê·ªëi t√°c
            </h2>
            <div className={styles.partnerList}>
              {partners.map((partner, index) => (
                <div
                  key={index}
                  className={styles.partnerCard}
                  data-aos="fade-left"
                  data-aos-delay={index * 150}
                >
                  <Image
                    src={partner.logo}
                    alt={partner.name}
                    width={48}
                    height={48}
                    className={styles.partnerLogo}
                  />
                  <div>
                    <p className={styles.partnerName}>{partner.name}</p>
                    <p className={styles.partnerEmail}>{partner.email}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>
    </>
  );
}
