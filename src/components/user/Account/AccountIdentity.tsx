"use client";
import Image from "next/image";
import { Lock, X, User, CreditCard } from "lucide-react";
import styles from "../../../styles/Account/AccountSub.module.css";
import { useState } from "react";

interface AccountIdentityProps {
  cccdFront: File | null;
  cccdBack: File | null;
  portrait: File | null;
  setCccdFront: React.Dispatch<React.SetStateAction<File | null>>;
  setCccdBack: React.Dispatch<React.SetStateAction<File | null>>;
  setPortrait: React.Dispatch<React.SetStateAction<File | null>>;
  handleFileUpload: (
    setter: React.Dispatch<React.SetStateAction<File | null>>,
    e: React.ChangeEvent<HTMLInputElement>
  ) => void;
}

export default function AccountIdentity({
  cccdFront,
  cccdBack,
  portrait,
  setCccdFront,
  setCccdBack,
  setPortrait,
  handleFileUpload,
}: AccountIdentityProps) {
  const [fullName, setFullName] = useState("");
  const [idNumber, setIdNumber] = useState("");

  const handleVerify = async () => {
    if (!cccdFront || !portrait) {
      alert("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ·∫£nh CCCD m·∫∑t tr∆∞·ªõc v√† ·∫£nh ch√¢n dung.");
      return;
    }

    const formData = new FormData();
    formData.append("id_card", cccdFront);
    formData.append("selfie", portrait);

    try {
      const res = await fetch("http://localhost:3000/verify-face", {
        method: "POST",
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        if (result.match) {
          alert(`‚úÖ X√°c minh th√†nh c√¥ng! ƒê·ªô t∆∞∆°ng ƒë·ªìng: ${(result.similarity * 100).toFixed(2)}%`);
          // C√≥ th·ªÉ x·ª≠ l√Ω ti·∫øp nh∆∞ g·ª≠i fullName, idNumber l√™n server c·ªßa b·∫°n n·∫øu c·∫ßn
        } else {
          alert(`‚ùå Khu√¥n m·∫∑t kh√¥ng kh·ªõp. ƒê·ªô t∆∞∆°ng ƒë·ªìng: ${(result.similarity * 100).toFixed(2)}%`);
        }
      } else {
        alert(result.error || "L·ªói x√°c minh.");
      }
    } catch (error) {
      console.error("L·ªói k·∫øt n·ªëi:", error);
      alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß x√°c minh.");
    }
  };

  return (
    <div className={styles.identityBox}>
      <h2 className={styles.sectionTitle}>
        <Lock className={styles.iconOrange} size={20} />
        X√°c minh danh t√≠nh
      </h2>

      {/* √î nh·∫≠p th√¥ng tin */}
      <div className={styles.infoGrid}>
        <div>
          <label className={styles.label}>
            <User size={16} className={styles.orangeIcon} /> H·ªç v√† t√™n
          </label>
          <input
            type="text"
            className={styles.input}
            placeholder="Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß"
            value={fullName}
            onChange={(e) => {
              const onlyLetters = e.target.value.replace(/[^A-Za-z√Ä-·ªπ\s]/g, "");
              setFullName(onlyLetters.toUpperCase());
            }}
          />
        </div>
        <div>
          <label className={styles.label}>
            <CreditCard size={16} className={styles.orangeIcon} /> S·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n
          </label>
          <input
            type="text"
            className={styles.input}
            placeholder="Nh·∫≠p s·ªë CCCD"
            value={idNumber}
            onChange={(e) => setIdNumber(e.target.value)}
          />
        </div>
      </div>

      {/* C√°c ph·∫ßn t·∫£i ·∫£nh */}
      <div className={styles.uploadGrid}>
        <UploadSection
          label="M·∫∑t tr∆∞·ªõc CCCD"
          file={cccdFront}
          onRemove={() => setCccdFront(null)}
          onUpload={(e) => handleFileUpload(setCccdFront, e)}
        />

        <UploadSection
          label="M·∫∑t sau CCCD"
          file={cccdBack}
          onRemove={() => setCccdBack(null)}
          onUpload={(e) => handleFileUpload(setCccdBack, e)}
        />

        <UploadSection
          label="·∫¢nh ch√¢n dung"
          file={portrait}
          onRemove={() => setPortrait(null)}
          onUpload={(e) => handleFileUpload(setPortrait, e)}
          emoji="üì∏"
        />
      </div>

      <div className={styles.warningBox}>
        <div className={styles.warningIcon}>
          <svg className={styles.warningSvg} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path
              fillRule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
              clipRule="evenodd"
            />
          </svg>
        </div>
        <div className={styles.warningText}>
          <p>Th√¥ng tin x√°c minh s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch nh·∫≠n d·∫°ng ng∆∞·ªùi d√πng.</p>
        </div>
      </div>

      <div className={styles.verifyButtonWrapper}>
        <button className={styles.verifyButton} onClick={handleVerify}>
          X√ÅC MINH
        </button>
      </div>
    </div>
  );
}

function UploadSection({
  label,
  file,
  onRemove,
  onUpload,
  emoji = "ü™™",
}: {
  label: string;
  file: File | null;
  onRemove: () => void;
  onUpload: (e: React.ChangeEvent<HTMLInputElement>) => void;
  emoji?: string;
}) {
  return (
    <div className={styles.uploadItem}>
      <label className={styles.uploadLabel}>{label}</label>
      <div className={styles.uploadPreview}>
        {file ? (
          <>
            <Image
              src={URL.createObjectURL(file)}
              alt={label}
              layout="fill"
              objectFit="cover"
            />
            <button onClick={onRemove} className={styles.removeButton}>
              <X size={16} />
            </button>
          </>
        ) : (
          <div className={styles.noImage}>
            <div className={styles.noImageEmoji}>{emoji}</div>
            <p className={styles.noImageText}>Ch∆∞a c√≥ ·∫£nh</p>
          </div>
        )}
      </div>
      <label className={styles.uploadButton}>
        <span>T·∫£i l√™n</span>
        <input type="file" className={styles.hiddenInput} onChange={onUpload} />
      </label>
    </div>
  );
}
