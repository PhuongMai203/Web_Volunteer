import Swal from "sweetalert2";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { getAuth } from "firebase/auth";

export const handleReport = async (activityId: string) => {
  const { value: selectedReason } = await Swal.fire({
   title: "üö© B√ÅO C√ÅO",
        html: `
        <div style="text-align: left; font-size: 14px; color: #333;">
            <p style="margin-bottom: 12px;">
            N·∫øu b·∫°n nh·∫≠n th·∫•y n·ªôi dung c√≥ d·∫•u hi·ªáu <b style="color: #e74c3c;">nguy hi·ªÉm</b>, xin h√£y b√°o c√°o ƒë·ªÉ ch√∫ng t√¥i x·ª≠ l√Ω k·ªãp th·ªùi.
            </p>

            <div style="background: #fff8e1; padding: 12px; border-radius: 8px; border: 1px solid #ffc107;">
            <label style="display: flex; align-items: center; margin-bottom: 8px; cursor: pointer;">
                <input type="radio" name="reason" value="N·ªôi dung b·∫°o l·ª±c / th√π gh√©t / qu·∫•y r·ªëi" style="margin-right: 8px;">
                <span>N·ªôi dung <b style="color: #e74c3c;">b·∫°o l·ª±c</b>, th√π gh√©t, qu·∫•y r·ªëi</span>
            </label>

            <label style="display: flex; align-items: center; margin-bottom: 8px; cursor: pointer;">
                <input type="radio" name="reason" value="B√°n h√†ng, qu·∫£ng c√°o m·∫∑t h√†ng sai s·ª± th·∫≠t" style="margin-right: 8px;">
                <span>B√°n h√†ng, qu·∫£ng c√°o <b style="color: #ff9800;">sai s·ª± th·∫≠t</b></span>
            </label>

            <label style="display: flex; align-items: center; margin-bottom: 8px; cursor: pointer;">
                <input type="radio" name="reason" value="Th√¥ng tin sai s·ª± th·∫≠t, l·ª´a ƒë·∫£o, gian l·∫≠n" style="margin-right: 8px;">
                <span>Th√¥ng tin <b style="color: #e74c3c;">sai s·ª± th·∫≠t</b>, l·ª´a ƒë·∫£o, gian l·∫≠n</span>
            </label>

            <label style="display: flex; align-items: center; margin-bottom: 8px; cursor: pointer;">
                <input type="radio" name="reason" value="Kh√°c" id="r4" style="margin-right: 8px;">
                <span>Kh√°c</span>
            </label>

            <input
                type="text"
                id="otherReasonInput"
                placeholder="Vui l√≤ng nh·∫≠p l√Ω do c·ª• th·ªÉ..."
                style="margin-top: 10px; display: none; width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;"
            />
            </div>
        </div>
        `,
    showCancelButton: true,
    confirmButtonText: "G·ª≠i",
    cancelButtonText: "H·ªßy",
    preConfirm: () => {
      const checked = (
        document.querySelector<HTMLInputElement>('input[name="reason"]:checked')
      )?.value;

      if (!checked) {
        Swal.showValidationMessage("Vui l√≤ng ch·ªçn l√Ω do b√°o c√°o!");
        return;
      }

      if (checked === "Kh√°c") {
        const otherReason = (
          document.getElementById("otherReasonInput") as HTMLInputElement
        ).value.trim();
        if (!otherReason) {
          Swal.showValidationMessage("Vui l√≤ng nh·∫≠p l√Ω do c·ª• th·ªÉ!");
          return;
        }
        return otherReason;
      }

      return checked;
    },
    didOpen: () => {
      const radios = document.querySelectorAll('input[name="reason"]');
      radios.forEach((radio) =>
        radio.addEventListener("change", () => {
          const otherInput = document.getElementById("otherReasonInput") as HTMLInputElement;
          if ((radio as HTMLInputElement).value === "Kh√°c" && (radio as HTMLInputElement).checked) {
            otherInput.style.display = "block";
          } else if (otherInput) {
            otherInput.style.display = "none";
          }
        })
      );
    },
  });

  if (selectedReason) {
    const auth = getAuth();
    const user = auth.currentUser;
    if (!user) {
      Swal.fire("L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi b√°o c√°o!", "error");
      return;
    }

    try {
      await addDoc(collection(db, "reports"), {
        activityId,
        userId: user.uid,
        reason: selectedReason,
        createdAt: serverTimestamp(),
      });
      Swal.fire("Th√†nh c√¥ng", "B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i.", "success");
    } catch (error) {
      console.error("L·ªói khi g·ª≠i b√°o c√°o:", error);
      Swal.fire("L·ªói", "Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.", "error");
    }
  }
};
